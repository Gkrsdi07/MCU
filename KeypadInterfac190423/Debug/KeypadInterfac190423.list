
KeypadInterfac190423.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f54  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08001118  08001118  00011118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800123c  0800123c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800123c  0800123c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800123c  0800123c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800123c  0800123c  0001123c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001240  08001240  00011240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  080012a8  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080012a8  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000bd1  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000366  00000000  00000000  00020c65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000120  00000000  00000000  00020fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000e8  00000000  00000000  000210f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002892  00000000  00000000  000211d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000011cf  00000000  00000000  00023a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000093b1  00000000  00000000  00024c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002dfea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a44  00000000  00000000  0002e03c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001100 	.word	0x08001100

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000068 	.word	0x20000068
 8000200:	08001100 	.word	0x08001100

08000204 <delay>:
#if !defined(_SOFT_FP) && defined(_ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void delay(int T)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	int i;
	while(T--)
 800020c:	e009      	b.n	8000222 <delay+0x1e>
	{
	for(i=0;i<4000;i++);
 800020e:	2300      	movs	r3, #0
 8000210:	60fb      	str	r3, [r7, #12]
 8000212:	e002      	b.n	800021a <delay+0x16>
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	3301      	adds	r3, #1
 8000218:	60fb      	str	r3, [r7, #12]
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000220:	dbf8      	blt.n	8000214 <delay+0x10>
	while(T--)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	1e5a      	subs	r2, r3, #1
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d1f0      	bne.n	800020e <delay+0xa>
	}
}
 800022c:	bf00      	nop
 800022e:	bf00      	nop
 8000230:	3714      	adds	r7, #20
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
	...

0800023c <main>:


int main(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b086      	sub	sp, #24
 8000240:	af00      	add	r7, sp, #0
	uint32_t *portcMODER =(uint32_t *)0x40020800;
 8000242:	4b87      	ldr	r3, [pc, #540]	; (8000460 <main+0x224>)
 8000244:	617b      	str	r3, [r7, #20]
	uint32_t *portcAHB1ENR =(uint32_t *)0x40023830;
 8000246:	4b87      	ldr	r3, [pc, #540]	; (8000464 <main+0x228>)
 8000248:	613b      	str	r3, [r7, #16]
	uint32_t *portcIDR =(uint32_t *)0x40020810;
 800024a:	4b87      	ldr	r3, [pc, #540]	; (8000468 <main+0x22c>)
 800024c:	60fb      	str	r3, [r7, #12]
	uint32_t *portcODR =(uint32_t *)0x40020814;
 800024e:	4b87      	ldr	r3, [pc, #540]	; (800046c <main+0x230>)
 8000250:	60bb      	str	r3, [r7, #8]

	uint32_t *portcPUPDR =(uint32_t *)0x4002080c;
 8000252:	4b87      	ldr	r3, [pc, #540]	; (8000470 <main+0x234>)
 8000254:	607b      	str	r3, [r7, #4]
	//Enable the Peripheral clock for GPIOC

	//rows-pc0-pc3=output
	//columns-pc4-pc7=input

	*portcAHB1ENR |= 0x4;
 8000256:	693b      	ldr	r3, [r7, #16]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f043 0204 	orr.w	r2, r3, #4
 800025e:	693b      	ldr	r3, [r7, #16]
 8000260:	601a      	str	r2, [r3, #0]

	//Row   PC0 to PC3  //Output
	*portcMODER |= 0x55;
 8000262:	697b      	ldr	r3, [r7, #20]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f043 0255 	orr.w	r2, r3, #85	; 0x55
 800026a:	697b      	ldr	r3, [r7, #20]
 800026c:	601a      	str	r2, [r3, #0]
	*portcPUPDR |= 0x5500;
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f443 42aa 	orr.w	r2, r3, #21760	; 0x5500
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	601a      	str	r2, [r3, #0]


	while(1)
	{
		//Make R1 low
		*portcODR |= 0x0f;
 800027a:	68bb      	ldr	r3, [r7, #8]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f043 020f 	orr.w	r2, r3, #15
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	601a      	str	r2, [r3, #0]
		*portcODR &= ~(1<<0);          //1st bit writing 0
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	f023 0201 	bic.w	r2, r3, #1
 800028e:	68bb      	ldr	r3, [r7, #8]
 8000290:	601a      	str	r2, [r3, #0]
		if(!(*portcIDR & (1<<4)))
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f003 0310 	and.w	r3, r3, #16
 800029a:	2b00      	cmp	r3, #0
 800029c:	d105      	bne.n	80002aa <main+0x6e>
		{
			delay(100);
 800029e:	2064      	movs	r0, #100	; 0x64
 80002a0:	f7ff ffb0 	bl	8000204 <delay>
			printf("1 pressed\n");
 80002a4:	4873      	ldr	r0, [pc, #460]	; (8000474 <main+0x238>)
 80002a6:	f000 fa9b 	bl	80007e0 <puts>
		}
		if(!(*portcIDR & (1<<5)))
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f003 0320 	and.w	r3, r3, #32
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d105      	bne.n	80002c2 <main+0x86>
		{
			delay(100);
 80002b6:	2064      	movs	r0, #100	; 0x64
 80002b8:	f7ff ffa4 	bl	8000204 <delay>
			printf("2 pressed\n");
 80002bc:	486e      	ldr	r0, [pc, #440]	; (8000478 <main+0x23c>)
 80002be:	f000 fa8f 	bl	80007e0 <puts>
		}
		if(!(*portcIDR & (1<<6)))
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d105      	bne.n	80002da <main+0x9e>
		{
			delay(100);
 80002ce:	2064      	movs	r0, #100	; 0x64
 80002d0:	f7ff ff98 	bl	8000204 <delay>
			printf("3 pressed\n");
 80002d4:	4869      	ldr	r0, [pc, #420]	; (800047c <main+0x240>)
 80002d6:	f000 fa83 	bl	80007e0 <puts>
		}
		if(!(*portcIDR & (1<<7)))
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d105      	bne.n	80002f2 <main+0xb6>
		{
			delay(100);
 80002e6:	2064      	movs	r0, #100	; 0x64
 80002e8:	f7ff ff8c 	bl	8000204 <delay>
			printf("A pressed\n");
 80002ec:	4864      	ldr	r0, [pc, #400]	; (8000480 <main+0x244>)
 80002ee:	f000 fa77 	bl	80007e0 <puts>
		}
		*portcODR |= 0x0f;
 80002f2:	68bb      	ldr	r3, [r7, #8]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f043 020f 	orr.w	r2, r3, #15
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	601a      	str	r2, [r3, #0]
		*portcODR &= ~(1<<1);
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f023 0202 	bic.w	r2, r3, #2
 8000306:	68bb      	ldr	r3, [r7, #8]
 8000308:	601a      	str	r2, [r3, #0]
		if(!(*portcIDR & (1<<4)))
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f003 0310 	and.w	r3, r3, #16
 8000312:	2b00      	cmp	r3, #0
 8000314:	d105      	bne.n	8000322 <main+0xe6>
		{
			delay(100);
 8000316:	2064      	movs	r0, #100	; 0x64
 8000318:	f7ff ff74 	bl	8000204 <delay>
			printf("4 pressed\n");
 800031c:	4859      	ldr	r0, [pc, #356]	; (8000484 <main+0x248>)
 800031e:	f000 fa5f 	bl	80007e0 <puts>
		}
		if(!(*portcIDR & (1<<5)))
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f003 0320 	and.w	r3, r3, #32
 800032a:	2b00      	cmp	r3, #0
 800032c:	d105      	bne.n	800033a <main+0xfe>
		{
			delay(100);
 800032e:	2064      	movs	r0, #100	; 0x64
 8000330:	f7ff ff68 	bl	8000204 <delay>
			printf("5 pressed\n");
 8000334:	4854      	ldr	r0, [pc, #336]	; (8000488 <main+0x24c>)
 8000336:	f000 fa53 	bl	80007e0 <puts>
		}
		if(!(*portcIDR & (1<<6)))
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000342:	2b00      	cmp	r3, #0
 8000344:	d105      	bne.n	8000352 <main+0x116>
		{
			delay(100);
 8000346:	2064      	movs	r0, #100	; 0x64
 8000348:	f7ff ff5c 	bl	8000204 <delay>
			printf("6 pressed\n");
 800034c:	484f      	ldr	r0, [pc, #316]	; (800048c <main+0x250>)
 800034e:	f000 fa47 	bl	80007e0 <puts>
		}
		if(!(*portcIDR & (1<<7)))
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800035a:	2b00      	cmp	r3, #0
 800035c:	d105      	bne.n	800036a <main+0x12e>
		{
			delay(100);
 800035e:	2064      	movs	r0, #100	; 0x64
 8000360:	f7ff ff50 	bl	8000204 <delay>
			printf("B pressed\n");
 8000364:	484a      	ldr	r0, [pc, #296]	; (8000490 <main+0x254>)
 8000366:	f000 fa3b 	bl	80007e0 <puts>
		}
		*portcODR |= 0x0f;
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f043 020f 	orr.w	r2, r3, #15
 8000372:	68bb      	ldr	r3, [r7, #8]
 8000374:	601a      	str	r2, [r3, #0]
		*portcODR &= ~(1<<2);
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	f023 0204 	bic.w	r2, r3, #4
 800037e:	68bb      	ldr	r3, [r7, #8]
 8000380:	601a      	str	r2, [r3, #0]
		if(!(*portcIDR & (1<<4)))
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f003 0310 	and.w	r3, r3, #16
 800038a:	2b00      	cmp	r3, #0
 800038c:	d105      	bne.n	800039a <main+0x15e>
		{
			delay(100);
 800038e:	2064      	movs	r0, #100	; 0x64
 8000390:	f7ff ff38 	bl	8000204 <delay>
			printf("7 pressed\n");
 8000394:	483f      	ldr	r0, [pc, #252]	; (8000494 <main+0x258>)
 8000396:	f000 fa23 	bl	80007e0 <puts>
		}
		if(!(*portcIDR & (1<<5)))
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f003 0320 	and.w	r3, r3, #32
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d105      	bne.n	80003b2 <main+0x176>
		{
			delay(100);
 80003a6:	2064      	movs	r0, #100	; 0x64
 80003a8:	f7ff ff2c 	bl	8000204 <delay>
			printf("8 pressed\n");
 80003ac:	483a      	ldr	r0, [pc, #232]	; (8000498 <main+0x25c>)
 80003ae:	f000 fa17 	bl	80007e0 <puts>
		}
		if(!(*portcIDR & (1<<6)))
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d105      	bne.n	80003ca <main+0x18e>
		{
			delay(100);
 80003be:	2064      	movs	r0, #100	; 0x64
 80003c0:	f7ff ff20 	bl	8000204 <delay>
			printf("9 pressed\n");
 80003c4:	4835      	ldr	r0, [pc, #212]	; (800049c <main+0x260>)
 80003c6:	f000 fa0b 	bl	80007e0 <puts>
		}
		if(!(*portcIDR & (1<<7)))
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d105      	bne.n	80003e2 <main+0x1a6>
		{
			delay(100);
 80003d6:	2064      	movs	r0, #100	; 0x64
 80003d8:	f7ff ff14 	bl	8000204 <delay>
			printf("C pressed\n");
 80003dc:	4830      	ldr	r0, [pc, #192]	; (80004a0 <main+0x264>)
 80003de:	f000 f9ff 	bl	80007e0 <puts>
		}
		*portcODR |= 0x0f;
 80003e2:	68bb      	ldr	r3, [r7, #8]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	f043 020f 	orr.w	r2, r3, #15
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	601a      	str	r2, [r3, #0]
		*portcODR &= ~(1<<3);
 80003ee:	68bb      	ldr	r3, [r7, #8]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f023 0208 	bic.w	r2, r3, #8
 80003f6:	68bb      	ldr	r3, [r7, #8]
 80003f8:	601a      	str	r2, [r3, #0]
		if(!(*portcIDR & (1<<4)))
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f003 0310 	and.w	r3, r3, #16
 8000402:	2b00      	cmp	r3, #0
 8000404:	d105      	bne.n	8000412 <main+0x1d6>
		{
			delay(100);
 8000406:	2064      	movs	r0, #100	; 0x64
 8000408:	f7ff fefc 	bl	8000204 <delay>
			printf("* pressed\n");
 800040c:	4825      	ldr	r0, [pc, #148]	; (80004a4 <main+0x268>)
 800040e:	f000 f9e7 	bl	80007e0 <puts>
		}
		if(!(*portcIDR & (1<<5)))
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f003 0320 	and.w	r3, r3, #32
 800041a:	2b00      	cmp	r3, #0
 800041c:	d105      	bne.n	800042a <main+0x1ee>
		{
			delay(100);
 800041e:	2064      	movs	r0, #100	; 0x64
 8000420:	f7ff fef0 	bl	8000204 <delay>
			printf("0 pressed\n");
 8000424:	4820      	ldr	r0, [pc, #128]	; (80004a8 <main+0x26c>)
 8000426:	f000 f9db 	bl	80007e0 <puts>
		}
		if(!(*portcIDR & (1<<6)))
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000432:	2b00      	cmp	r3, #0
 8000434:	d105      	bne.n	8000442 <main+0x206>
		{
			delay(100);
 8000436:	2064      	movs	r0, #100	; 0x64
 8000438:	f7ff fee4 	bl	8000204 <delay>
			printf("# pressed\n");
 800043c:	481b      	ldr	r0, [pc, #108]	; (80004ac <main+0x270>)
 800043e:	f000 f9cf 	bl	80007e0 <puts>
		}
		if(!(*portcIDR & (1<<7)))
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800044a:	2b00      	cmp	r3, #0
 800044c:	f47f af15 	bne.w	800027a <main+0x3e>
		{
			delay(100);
 8000450:	2064      	movs	r0, #100	; 0x64
 8000452:	f7ff fed7 	bl	8000204 <delay>
			printf("D pressed\n");
 8000456:	4816      	ldr	r0, [pc, #88]	; (80004b0 <main+0x274>)
 8000458:	f000 f9c2 	bl	80007e0 <puts>
		*portcODR |= 0x0f;
 800045c:	e70d      	b.n	800027a <main+0x3e>
 800045e:	bf00      	nop
 8000460:	40020800 	.word	0x40020800
 8000464:	40023830 	.word	0x40023830
 8000468:	40020810 	.word	0x40020810
 800046c:	40020814 	.word	0x40020814
 8000470:	4002080c 	.word	0x4002080c
 8000474:	08001118 	.word	0x08001118
 8000478:	08001124 	.word	0x08001124
 800047c:	08001130 	.word	0x08001130
 8000480:	0800113c 	.word	0x0800113c
 8000484:	08001148 	.word	0x08001148
 8000488:	08001154 	.word	0x08001154
 800048c:	08001160 	.word	0x08001160
 8000490:	0800116c 	.word	0x0800116c
 8000494:	08001178 	.word	0x08001178
 8000498:	08001184 	.word	0x08001184
 800049c:	08001190 	.word	0x08001190
 80004a0:	0800119c 	.word	0x0800119c
 80004a4:	080011a8 	.word	0x080011a8
 80004a8:	080011b4 	.word	0x080011b4
 80004ac:	080011c0 	.word	0x080011c0
 80004b0:	080011cc 	.word	0x080011cc

080004b4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004be:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <ITM_SendChar+0x48>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a0e      	ldr	r2, [pc, #56]	; (80004fc <ITM_SendChar+0x48>)
 80004c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004c8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004ca:	4b0d      	ldr	r3, [pc, #52]	; (8000500 <ITM_SendChar+0x4c>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a0c      	ldr	r2, [pc, #48]	; (8000500 <ITM_SendChar+0x4c>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004d6:	bf00      	nop
 80004d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f003 0301 	and.w	r3, r3, #1
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d0f8      	beq.n	80004d8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004e6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	6013      	str	r3, [r2, #0]
}
 80004ee:	bf00      	nop
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	e000edfc 	.word	0xe000edfc
 8000500:	e0000e00 	.word	0xe0000e00

08000504 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	e00a      	b.n	800052c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000516:	f3af 8000 	nop.w
 800051a:	4601      	mov	r1, r0
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	1c5a      	adds	r2, r3, #1
 8000520:	60ba      	str	r2, [r7, #8]
 8000522:	b2ca      	uxtb	r2, r1
 8000524:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	3301      	adds	r3, #1
 800052a:	617b      	str	r3, [r7, #20]
 800052c:	697a      	ldr	r2, [r7, #20]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	429a      	cmp	r2, r3
 8000532:	dbf0      	blt.n	8000516 <_read+0x12>
  }

  return len;
 8000534:	687b      	ldr	r3, [r7, #4]
}
 8000536:	4618      	mov	r0, r3
 8000538:	3718      	adds	r7, #24
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}

0800053e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	b086      	sub	sp, #24
 8000542:	af00      	add	r7, sp, #0
 8000544:	60f8      	str	r0, [r7, #12]
 8000546:	60b9      	str	r1, [r7, #8]
 8000548:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054a:	2300      	movs	r3, #0
 800054c:	617b      	str	r3, [r7, #20]
 800054e:	e009      	b.n	8000564 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	1c5a      	adds	r2, r3, #1
 8000554:	60ba      	str	r2, [r7, #8]
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff ffab 	bl	80004b4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	3301      	adds	r3, #1
 8000562:	617b      	str	r3, [r7, #20]
 8000564:	697a      	ldr	r2, [r7, #20]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	429a      	cmp	r2, r3
 800056a:	dbf1      	blt.n	8000550 <_write+0x12>
  }
  return len;
 800056c:	687b      	ldr	r3, [r7, #4]
}
 800056e:	4618      	mov	r0, r3
 8000570:	3718      	adds	r7, #24
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}

08000576 <_close>:

int _close(int file)
{
 8000576:	b480      	push	{r7}
 8000578:	b083      	sub	sp, #12
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800057e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000582:	4618      	mov	r0, r3
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800058e:	b480      	push	{r7}
 8000590:	b083      	sub	sp, #12
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
 8000596:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800059e:	605a      	str	r2, [r3, #4]
  return 0;
 80005a0:	2300      	movs	r3, #0
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <_isatty>:

int _isatty(int file)
{
 80005ae:	b480      	push	{r7}
 80005b0:	b083      	sub	sp, #12
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005b6:	2301      	movs	r3, #1
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005d0:	2300      	movs	r3, #0
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
	...

080005e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005e8:	4a14      	ldr	r2, [pc, #80]	; (800063c <_sbrk+0x5c>)
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <_sbrk+0x60>)
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005f4:	4b13      	ldr	r3, [pc, #76]	; (8000644 <_sbrk+0x64>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d102      	bne.n	8000602 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <_sbrk+0x64>)
 80005fe:	4a12      	ldr	r2, [pc, #72]	; (8000648 <_sbrk+0x68>)
 8000600:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <_sbrk+0x64>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	693a      	ldr	r2, [r7, #16]
 800060c:	429a      	cmp	r2, r3
 800060e:	d207      	bcs.n	8000620 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000610:	f000 f846 	bl	80006a0 <__errno>
 8000614:	4603      	mov	r3, r0
 8000616:	220c      	movs	r2, #12
 8000618:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800061a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800061e:	e009      	b.n	8000634 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <_sbrk+0x64>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <_sbrk+0x64>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4413      	add	r3, r2
 800062e:	4a05      	ldr	r2, [pc, #20]	; (8000644 <_sbrk+0x64>)
 8000630:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000632:	68fb      	ldr	r3, [r7, #12]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3718      	adds	r7, #24
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20020000 	.word	0x20020000
 8000640:	00000400 	.word	0x00000400
 8000644:	20000080 	.word	0x20000080
 8000648:	20000098 	.word	0x20000098

0800064c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800064c:	480d      	ldr	r0, [pc, #52]	; (8000684 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800064e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000650:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000654:	480c      	ldr	r0, [pc, #48]	; (8000688 <LoopForever+0x6>)
  ldr r1, =_edata
 8000656:	490d      	ldr	r1, [pc, #52]	; (800068c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000658:	4a0d      	ldr	r2, [pc, #52]	; (8000690 <LoopForever+0xe>)
  movs r3, #0
 800065a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800065c:	e002      	b.n	8000664 <LoopCopyDataInit>

0800065e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000662:	3304      	adds	r3, #4

08000664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000668:	d3f9      	bcc.n	800065e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800066a:	4a0a      	ldr	r2, [pc, #40]	; (8000694 <LoopForever+0x12>)
  ldr r4, =_ebss
 800066c:	4c0a      	ldr	r4, [pc, #40]	; (8000698 <LoopForever+0x16>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000670:	e001      	b.n	8000676 <LoopFillZerobss>

08000672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000674:	3204      	adds	r2, #4

08000676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000678:	d3fb      	bcc.n	8000672 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800067a:	f000 f817 	bl	80006ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800067e:	f7ff fddd 	bl	800023c <main>

08000682 <LoopForever>:

LoopForever:
  b LoopForever
 8000682:	e7fe      	b.n	8000682 <LoopForever>
  ldr   r0, =_estack
 8000684:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800068c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000690:	08001244 	.word	0x08001244
  ldr r2, =_sbss
 8000694:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000698:	20000094 	.word	0x20000094

0800069c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800069c:	e7fe      	b.n	800069c <ADC_IRQHandler>
	...

080006a0 <__errno>:
 80006a0:	4b01      	ldr	r3, [pc, #4]	; (80006a8 <__errno+0x8>)
 80006a2:	6818      	ldr	r0, [r3, #0]
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	20000000 	.word	0x20000000

080006ac <__libc_init_array>:
 80006ac:	b570      	push	{r4, r5, r6, lr}
 80006ae:	4d0d      	ldr	r5, [pc, #52]	; (80006e4 <__libc_init_array+0x38>)
 80006b0:	4c0d      	ldr	r4, [pc, #52]	; (80006e8 <__libc_init_array+0x3c>)
 80006b2:	1b64      	subs	r4, r4, r5
 80006b4:	10a4      	asrs	r4, r4, #2
 80006b6:	2600      	movs	r6, #0
 80006b8:	42a6      	cmp	r6, r4
 80006ba:	d109      	bne.n	80006d0 <__libc_init_array+0x24>
 80006bc:	4d0b      	ldr	r5, [pc, #44]	; (80006ec <__libc_init_array+0x40>)
 80006be:	4c0c      	ldr	r4, [pc, #48]	; (80006f0 <__libc_init_array+0x44>)
 80006c0:	f000 fd1e 	bl	8001100 <_init>
 80006c4:	1b64      	subs	r4, r4, r5
 80006c6:	10a4      	asrs	r4, r4, #2
 80006c8:	2600      	movs	r6, #0
 80006ca:	42a6      	cmp	r6, r4
 80006cc:	d105      	bne.n	80006da <__libc_init_array+0x2e>
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80006d4:	4798      	blx	r3
 80006d6:	3601      	adds	r6, #1
 80006d8:	e7ee      	b.n	80006b8 <__libc_init_array+0xc>
 80006da:	f855 3b04 	ldr.w	r3, [r5], #4
 80006de:	4798      	blx	r3
 80006e0:	3601      	adds	r6, #1
 80006e2:	e7f2      	b.n	80006ca <__libc_init_array+0x1e>
 80006e4:	0800123c 	.word	0x0800123c
 80006e8:	0800123c 	.word	0x0800123c
 80006ec:	0800123c 	.word	0x0800123c
 80006f0:	08001240 	.word	0x08001240

080006f4 <memset>:
 80006f4:	4402      	add	r2, r0
 80006f6:	4603      	mov	r3, r0
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d100      	bne.n	80006fe <memset+0xa>
 80006fc:	4770      	bx	lr
 80006fe:	f803 1b01 	strb.w	r1, [r3], #1
 8000702:	e7f9      	b.n	80006f8 <memset+0x4>

08000704 <_puts_r>:
 8000704:	b570      	push	{r4, r5, r6, lr}
 8000706:	460e      	mov	r6, r1
 8000708:	4605      	mov	r5, r0
 800070a:	b118      	cbz	r0, 8000714 <_puts_r+0x10>
 800070c:	6983      	ldr	r3, [r0, #24]
 800070e:	b90b      	cbnz	r3, 8000714 <_puts_r+0x10>
 8000710:	f000 fa48 	bl	8000ba4 <__sinit>
 8000714:	69ab      	ldr	r3, [r5, #24]
 8000716:	68ac      	ldr	r4, [r5, #8]
 8000718:	b913      	cbnz	r3, 8000720 <_puts_r+0x1c>
 800071a:	4628      	mov	r0, r5
 800071c:	f000 fa42 	bl	8000ba4 <__sinit>
 8000720:	4b2c      	ldr	r3, [pc, #176]	; (80007d4 <_puts_r+0xd0>)
 8000722:	429c      	cmp	r4, r3
 8000724:	d120      	bne.n	8000768 <_puts_r+0x64>
 8000726:	686c      	ldr	r4, [r5, #4]
 8000728:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800072a:	07db      	lsls	r3, r3, #31
 800072c:	d405      	bmi.n	800073a <_puts_r+0x36>
 800072e:	89a3      	ldrh	r3, [r4, #12]
 8000730:	0598      	lsls	r0, r3, #22
 8000732:	d402      	bmi.n	800073a <_puts_r+0x36>
 8000734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000736:	f000 fad3 	bl	8000ce0 <__retarget_lock_acquire_recursive>
 800073a:	89a3      	ldrh	r3, [r4, #12]
 800073c:	0719      	lsls	r1, r3, #28
 800073e:	d51d      	bpl.n	800077c <_puts_r+0x78>
 8000740:	6923      	ldr	r3, [r4, #16]
 8000742:	b1db      	cbz	r3, 800077c <_puts_r+0x78>
 8000744:	3e01      	subs	r6, #1
 8000746:	68a3      	ldr	r3, [r4, #8]
 8000748:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800074c:	3b01      	subs	r3, #1
 800074e:	60a3      	str	r3, [r4, #8]
 8000750:	bb39      	cbnz	r1, 80007a2 <_puts_r+0x9e>
 8000752:	2b00      	cmp	r3, #0
 8000754:	da38      	bge.n	80007c8 <_puts_r+0xc4>
 8000756:	4622      	mov	r2, r4
 8000758:	210a      	movs	r1, #10
 800075a:	4628      	mov	r0, r5
 800075c:	f000 f848 	bl	80007f0 <__swbuf_r>
 8000760:	3001      	adds	r0, #1
 8000762:	d011      	beq.n	8000788 <_puts_r+0x84>
 8000764:	250a      	movs	r5, #10
 8000766:	e011      	b.n	800078c <_puts_r+0x88>
 8000768:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <_puts_r+0xd4>)
 800076a:	429c      	cmp	r4, r3
 800076c:	d101      	bne.n	8000772 <_puts_r+0x6e>
 800076e:	68ac      	ldr	r4, [r5, #8]
 8000770:	e7da      	b.n	8000728 <_puts_r+0x24>
 8000772:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <_puts_r+0xd8>)
 8000774:	429c      	cmp	r4, r3
 8000776:	bf08      	it	eq
 8000778:	68ec      	ldreq	r4, [r5, #12]
 800077a:	e7d5      	b.n	8000728 <_puts_r+0x24>
 800077c:	4621      	mov	r1, r4
 800077e:	4628      	mov	r0, r5
 8000780:	f000 f888 	bl	8000894 <__swsetup_r>
 8000784:	2800      	cmp	r0, #0
 8000786:	d0dd      	beq.n	8000744 <_puts_r+0x40>
 8000788:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800078c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800078e:	07da      	lsls	r2, r3, #31
 8000790:	d405      	bmi.n	800079e <_puts_r+0x9a>
 8000792:	89a3      	ldrh	r3, [r4, #12]
 8000794:	059b      	lsls	r3, r3, #22
 8000796:	d402      	bmi.n	800079e <_puts_r+0x9a>
 8000798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800079a:	f000 faa2 	bl	8000ce2 <__retarget_lock_release_recursive>
 800079e:	4628      	mov	r0, r5
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	da04      	bge.n	80007b0 <_puts_r+0xac>
 80007a6:	69a2      	ldr	r2, [r4, #24]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	dc06      	bgt.n	80007ba <_puts_r+0xb6>
 80007ac:	290a      	cmp	r1, #10
 80007ae:	d004      	beq.n	80007ba <_puts_r+0xb6>
 80007b0:	6823      	ldr	r3, [r4, #0]
 80007b2:	1c5a      	adds	r2, r3, #1
 80007b4:	6022      	str	r2, [r4, #0]
 80007b6:	7019      	strb	r1, [r3, #0]
 80007b8:	e7c5      	b.n	8000746 <_puts_r+0x42>
 80007ba:	4622      	mov	r2, r4
 80007bc:	4628      	mov	r0, r5
 80007be:	f000 f817 	bl	80007f0 <__swbuf_r>
 80007c2:	3001      	adds	r0, #1
 80007c4:	d1bf      	bne.n	8000746 <_puts_r+0x42>
 80007c6:	e7df      	b.n	8000788 <_puts_r+0x84>
 80007c8:	6823      	ldr	r3, [r4, #0]
 80007ca:	250a      	movs	r5, #10
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	6022      	str	r2, [r4, #0]
 80007d0:	701d      	strb	r5, [r3, #0]
 80007d2:	e7db      	b.n	800078c <_puts_r+0x88>
 80007d4:	080011fc 	.word	0x080011fc
 80007d8:	0800121c 	.word	0x0800121c
 80007dc:	080011dc 	.word	0x080011dc

080007e0 <puts>:
 80007e0:	4b02      	ldr	r3, [pc, #8]	; (80007ec <puts+0xc>)
 80007e2:	4601      	mov	r1, r0
 80007e4:	6818      	ldr	r0, [r3, #0]
 80007e6:	f7ff bf8d 	b.w	8000704 <_puts_r>
 80007ea:	bf00      	nop
 80007ec:	20000000 	.word	0x20000000

080007f0 <__swbuf_r>:
 80007f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007f2:	460e      	mov	r6, r1
 80007f4:	4614      	mov	r4, r2
 80007f6:	4605      	mov	r5, r0
 80007f8:	b118      	cbz	r0, 8000802 <__swbuf_r+0x12>
 80007fa:	6983      	ldr	r3, [r0, #24]
 80007fc:	b90b      	cbnz	r3, 8000802 <__swbuf_r+0x12>
 80007fe:	f000 f9d1 	bl	8000ba4 <__sinit>
 8000802:	4b21      	ldr	r3, [pc, #132]	; (8000888 <__swbuf_r+0x98>)
 8000804:	429c      	cmp	r4, r3
 8000806:	d12b      	bne.n	8000860 <__swbuf_r+0x70>
 8000808:	686c      	ldr	r4, [r5, #4]
 800080a:	69a3      	ldr	r3, [r4, #24]
 800080c:	60a3      	str	r3, [r4, #8]
 800080e:	89a3      	ldrh	r3, [r4, #12]
 8000810:	071a      	lsls	r2, r3, #28
 8000812:	d52f      	bpl.n	8000874 <__swbuf_r+0x84>
 8000814:	6923      	ldr	r3, [r4, #16]
 8000816:	b36b      	cbz	r3, 8000874 <__swbuf_r+0x84>
 8000818:	6923      	ldr	r3, [r4, #16]
 800081a:	6820      	ldr	r0, [r4, #0]
 800081c:	1ac0      	subs	r0, r0, r3
 800081e:	6963      	ldr	r3, [r4, #20]
 8000820:	b2f6      	uxtb	r6, r6
 8000822:	4283      	cmp	r3, r0
 8000824:	4637      	mov	r7, r6
 8000826:	dc04      	bgt.n	8000832 <__swbuf_r+0x42>
 8000828:	4621      	mov	r1, r4
 800082a:	4628      	mov	r0, r5
 800082c:	f000 f926 	bl	8000a7c <_fflush_r>
 8000830:	bb30      	cbnz	r0, 8000880 <__swbuf_r+0x90>
 8000832:	68a3      	ldr	r3, [r4, #8]
 8000834:	3b01      	subs	r3, #1
 8000836:	60a3      	str	r3, [r4, #8]
 8000838:	6823      	ldr	r3, [r4, #0]
 800083a:	1c5a      	adds	r2, r3, #1
 800083c:	6022      	str	r2, [r4, #0]
 800083e:	701e      	strb	r6, [r3, #0]
 8000840:	6963      	ldr	r3, [r4, #20]
 8000842:	3001      	adds	r0, #1
 8000844:	4283      	cmp	r3, r0
 8000846:	d004      	beq.n	8000852 <__swbuf_r+0x62>
 8000848:	89a3      	ldrh	r3, [r4, #12]
 800084a:	07db      	lsls	r3, r3, #31
 800084c:	d506      	bpl.n	800085c <__swbuf_r+0x6c>
 800084e:	2e0a      	cmp	r6, #10
 8000850:	d104      	bne.n	800085c <__swbuf_r+0x6c>
 8000852:	4621      	mov	r1, r4
 8000854:	4628      	mov	r0, r5
 8000856:	f000 f911 	bl	8000a7c <_fflush_r>
 800085a:	b988      	cbnz	r0, 8000880 <__swbuf_r+0x90>
 800085c:	4638      	mov	r0, r7
 800085e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <__swbuf_r+0x9c>)
 8000862:	429c      	cmp	r4, r3
 8000864:	d101      	bne.n	800086a <__swbuf_r+0x7a>
 8000866:	68ac      	ldr	r4, [r5, #8]
 8000868:	e7cf      	b.n	800080a <__swbuf_r+0x1a>
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <__swbuf_r+0xa0>)
 800086c:	429c      	cmp	r4, r3
 800086e:	bf08      	it	eq
 8000870:	68ec      	ldreq	r4, [r5, #12]
 8000872:	e7ca      	b.n	800080a <__swbuf_r+0x1a>
 8000874:	4621      	mov	r1, r4
 8000876:	4628      	mov	r0, r5
 8000878:	f000 f80c 	bl	8000894 <__swsetup_r>
 800087c:	2800      	cmp	r0, #0
 800087e:	d0cb      	beq.n	8000818 <__swbuf_r+0x28>
 8000880:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000884:	e7ea      	b.n	800085c <__swbuf_r+0x6c>
 8000886:	bf00      	nop
 8000888:	080011fc 	.word	0x080011fc
 800088c:	0800121c 	.word	0x0800121c
 8000890:	080011dc 	.word	0x080011dc

08000894 <__swsetup_r>:
 8000894:	4b32      	ldr	r3, [pc, #200]	; (8000960 <__swsetup_r+0xcc>)
 8000896:	b570      	push	{r4, r5, r6, lr}
 8000898:	681d      	ldr	r5, [r3, #0]
 800089a:	4606      	mov	r6, r0
 800089c:	460c      	mov	r4, r1
 800089e:	b125      	cbz	r5, 80008aa <__swsetup_r+0x16>
 80008a0:	69ab      	ldr	r3, [r5, #24]
 80008a2:	b913      	cbnz	r3, 80008aa <__swsetup_r+0x16>
 80008a4:	4628      	mov	r0, r5
 80008a6:	f000 f97d 	bl	8000ba4 <__sinit>
 80008aa:	4b2e      	ldr	r3, [pc, #184]	; (8000964 <__swsetup_r+0xd0>)
 80008ac:	429c      	cmp	r4, r3
 80008ae:	d10f      	bne.n	80008d0 <__swsetup_r+0x3c>
 80008b0:	686c      	ldr	r4, [r5, #4]
 80008b2:	89a3      	ldrh	r3, [r4, #12]
 80008b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80008b8:	0719      	lsls	r1, r3, #28
 80008ba:	d42c      	bmi.n	8000916 <__swsetup_r+0x82>
 80008bc:	06dd      	lsls	r5, r3, #27
 80008be:	d411      	bmi.n	80008e4 <__swsetup_r+0x50>
 80008c0:	2309      	movs	r3, #9
 80008c2:	6033      	str	r3, [r6, #0]
 80008c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80008c8:	81a3      	strh	r3, [r4, #12]
 80008ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008ce:	e03e      	b.n	800094e <__swsetup_r+0xba>
 80008d0:	4b25      	ldr	r3, [pc, #148]	; (8000968 <__swsetup_r+0xd4>)
 80008d2:	429c      	cmp	r4, r3
 80008d4:	d101      	bne.n	80008da <__swsetup_r+0x46>
 80008d6:	68ac      	ldr	r4, [r5, #8]
 80008d8:	e7eb      	b.n	80008b2 <__swsetup_r+0x1e>
 80008da:	4b24      	ldr	r3, [pc, #144]	; (800096c <__swsetup_r+0xd8>)
 80008dc:	429c      	cmp	r4, r3
 80008de:	bf08      	it	eq
 80008e0:	68ec      	ldreq	r4, [r5, #12]
 80008e2:	e7e6      	b.n	80008b2 <__swsetup_r+0x1e>
 80008e4:	0758      	lsls	r0, r3, #29
 80008e6:	d512      	bpl.n	800090e <__swsetup_r+0x7a>
 80008e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008ea:	b141      	cbz	r1, 80008fe <__swsetup_r+0x6a>
 80008ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80008f0:	4299      	cmp	r1, r3
 80008f2:	d002      	beq.n	80008fa <__swsetup_r+0x66>
 80008f4:	4630      	mov	r0, r6
 80008f6:	f000 fa5b 	bl	8000db0 <_free_r>
 80008fa:	2300      	movs	r3, #0
 80008fc:	6363      	str	r3, [r4, #52]	; 0x34
 80008fe:	89a3      	ldrh	r3, [r4, #12]
 8000900:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000904:	81a3      	strh	r3, [r4, #12]
 8000906:	2300      	movs	r3, #0
 8000908:	6063      	str	r3, [r4, #4]
 800090a:	6923      	ldr	r3, [r4, #16]
 800090c:	6023      	str	r3, [r4, #0]
 800090e:	89a3      	ldrh	r3, [r4, #12]
 8000910:	f043 0308 	orr.w	r3, r3, #8
 8000914:	81a3      	strh	r3, [r4, #12]
 8000916:	6923      	ldr	r3, [r4, #16]
 8000918:	b94b      	cbnz	r3, 800092e <__swsetup_r+0x9a>
 800091a:	89a3      	ldrh	r3, [r4, #12]
 800091c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000924:	d003      	beq.n	800092e <__swsetup_r+0x9a>
 8000926:	4621      	mov	r1, r4
 8000928:	4630      	mov	r0, r6
 800092a:	f000 fa01 	bl	8000d30 <__smakebuf_r>
 800092e:	89a0      	ldrh	r0, [r4, #12]
 8000930:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000934:	f010 0301 	ands.w	r3, r0, #1
 8000938:	d00a      	beq.n	8000950 <__swsetup_r+0xbc>
 800093a:	2300      	movs	r3, #0
 800093c:	60a3      	str	r3, [r4, #8]
 800093e:	6963      	ldr	r3, [r4, #20]
 8000940:	425b      	negs	r3, r3
 8000942:	61a3      	str	r3, [r4, #24]
 8000944:	6923      	ldr	r3, [r4, #16]
 8000946:	b943      	cbnz	r3, 800095a <__swsetup_r+0xc6>
 8000948:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800094c:	d1ba      	bne.n	80008c4 <__swsetup_r+0x30>
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	0781      	lsls	r1, r0, #30
 8000952:	bf58      	it	pl
 8000954:	6963      	ldrpl	r3, [r4, #20]
 8000956:	60a3      	str	r3, [r4, #8]
 8000958:	e7f4      	b.n	8000944 <__swsetup_r+0xb0>
 800095a:	2000      	movs	r0, #0
 800095c:	e7f7      	b.n	800094e <__swsetup_r+0xba>
 800095e:	bf00      	nop
 8000960:	20000000 	.word	0x20000000
 8000964:	080011fc 	.word	0x080011fc
 8000968:	0800121c 	.word	0x0800121c
 800096c:	080011dc 	.word	0x080011dc

08000970 <__sflush_r>:
 8000970:	898a      	ldrh	r2, [r1, #12]
 8000972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000976:	4605      	mov	r5, r0
 8000978:	0710      	lsls	r0, r2, #28
 800097a:	460c      	mov	r4, r1
 800097c:	d458      	bmi.n	8000a30 <__sflush_r+0xc0>
 800097e:	684b      	ldr	r3, [r1, #4]
 8000980:	2b00      	cmp	r3, #0
 8000982:	dc05      	bgt.n	8000990 <__sflush_r+0x20>
 8000984:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000986:	2b00      	cmp	r3, #0
 8000988:	dc02      	bgt.n	8000990 <__sflush_r+0x20>
 800098a:	2000      	movs	r0, #0
 800098c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000990:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000992:	2e00      	cmp	r6, #0
 8000994:	d0f9      	beq.n	800098a <__sflush_r+0x1a>
 8000996:	2300      	movs	r3, #0
 8000998:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800099c:	682f      	ldr	r7, [r5, #0]
 800099e:	602b      	str	r3, [r5, #0]
 80009a0:	d032      	beq.n	8000a08 <__sflush_r+0x98>
 80009a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80009a4:	89a3      	ldrh	r3, [r4, #12]
 80009a6:	075a      	lsls	r2, r3, #29
 80009a8:	d505      	bpl.n	80009b6 <__sflush_r+0x46>
 80009aa:	6863      	ldr	r3, [r4, #4]
 80009ac:	1ac0      	subs	r0, r0, r3
 80009ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80009b0:	b10b      	cbz	r3, 80009b6 <__sflush_r+0x46>
 80009b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009b4:	1ac0      	subs	r0, r0, r3
 80009b6:	2300      	movs	r3, #0
 80009b8:	4602      	mov	r2, r0
 80009ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80009bc:	6a21      	ldr	r1, [r4, #32]
 80009be:	4628      	mov	r0, r5
 80009c0:	47b0      	blx	r6
 80009c2:	1c43      	adds	r3, r0, #1
 80009c4:	89a3      	ldrh	r3, [r4, #12]
 80009c6:	d106      	bne.n	80009d6 <__sflush_r+0x66>
 80009c8:	6829      	ldr	r1, [r5, #0]
 80009ca:	291d      	cmp	r1, #29
 80009cc:	d82c      	bhi.n	8000a28 <__sflush_r+0xb8>
 80009ce:	4a2a      	ldr	r2, [pc, #168]	; (8000a78 <__sflush_r+0x108>)
 80009d0:	40ca      	lsrs	r2, r1
 80009d2:	07d6      	lsls	r6, r2, #31
 80009d4:	d528      	bpl.n	8000a28 <__sflush_r+0xb8>
 80009d6:	2200      	movs	r2, #0
 80009d8:	6062      	str	r2, [r4, #4]
 80009da:	04d9      	lsls	r1, r3, #19
 80009dc:	6922      	ldr	r2, [r4, #16]
 80009de:	6022      	str	r2, [r4, #0]
 80009e0:	d504      	bpl.n	80009ec <__sflush_r+0x7c>
 80009e2:	1c42      	adds	r2, r0, #1
 80009e4:	d101      	bne.n	80009ea <__sflush_r+0x7a>
 80009e6:	682b      	ldr	r3, [r5, #0]
 80009e8:	b903      	cbnz	r3, 80009ec <__sflush_r+0x7c>
 80009ea:	6560      	str	r0, [r4, #84]	; 0x54
 80009ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009ee:	602f      	str	r7, [r5, #0]
 80009f0:	2900      	cmp	r1, #0
 80009f2:	d0ca      	beq.n	800098a <__sflush_r+0x1a>
 80009f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80009f8:	4299      	cmp	r1, r3
 80009fa:	d002      	beq.n	8000a02 <__sflush_r+0x92>
 80009fc:	4628      	mov	r0, r5
 80009fe:	f000 f9d7 	bl	8000db0 <_free_r>
 8000a02:	2000      	movs	r0, #0
 8000a04:	6360      	str	r0, [r4, #52]	; 0x34
 8000a06:	e7c1      	b.n	800098c <__sflush_r+0x1c>
 8000a08:	6a21      	ldr	r1, [r4, #32]
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	4628      	mov	r0, r5
 8000a0e:	47b0      	blx	r6
 8000a10:	1c41      	adds	r1, r0, #1
 8000a12:	d1c7      	bne.n	80009a4 <__sflush_r+0x34>
 8000a14:	682b      	ldr	r3, [r5, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d0c4      	beq.n	80009a4 <__sflush_r+0x34>
 8000a1a:	2b1d      	cmp	r3, #29
 8000a1c:	d001      	beq.n	8000a22 <__sflush_r+0xb2>
 8000a1e:	2b16      	cmp	r3, #22
 8000a20:	d101      	bne.n	8000a26 <__sflush_r+0xb6>
 8000a22:	602f      	str	r7, [r5, #0]
 8000a24:	e7b1      	b.n	800098a <__sflush_r+0x1a>
 8000a26:	89a3      	ldrh	r3, [r4, #12]
 8000a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a2c:	81a3      	strh	r3, [r4, #12]
 8000a2e:	e7ad      	b.n	800098c <__sflush_r+0x1c>
 8000a30:	690f      	ldr	r7, [r1, #16]
 8000a32:	2f00      	cmp	r7, #0
 8000a34:	d0a9      	beq.n	800098a <__sflush_r+0x1a>
 8000a36:	0793      	lsls	r3, r2, #30
 8000a38:	680e      	ldr	r6, [r1, #0]
 8000a3a:	bf08      	it	eq
 8000a3c:	694b      	ldreq	r3, [r1, #20]
 8000a3e:	600f      	str	r7, [r1, #0]
 8000a40:	bf18      	it	ne
 8000a42:	2300      	movne	r3, #0
 8000a44:	eba6 0807 	sub.w	r8, r6, r7
 8000a48:	608b      	str	r3, [r1, #8]
 8000a4a:	f1b8 0f00 	cmp.w	r8, #0
 8000a4e:	dd9c      	ble.n	800098a <__sflush_r+0x1a>
 8000a50:	6a21      	ldr	r1, [r4, #32]
 8000a52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000a54:	4643      	mov	r3, r8
 8000a56:	463a      	mov	r2, r7
 8000a58:	4628      	mov	r0, r5
 8000a5a:	47b0      	blx	r6
 8000a5c:	2800      	cmp	r0, #0
 8000a5e:	dc06      	bgt.n	8000a6e <__sflush_r+0xfe>
 8000a60:	89a3      	ldrh	r3, [r4, #12]
 8000a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a66:	81a3      	strh	r3, [r4, #12]
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a6c:	e78e      	b.n	800098c <__sflush_r+0x1c>
 8000a6e:	4407      	add	r7, r0
 8000a70:	eba8 0800 	sub.w	r8, r8, r0
 8000a74:	e7e9      	b.n	8000a4a <__sflush_r+0xda>
 8000a76:	bf00      	nop
 8000a78:	20400001 	.word	0x20400001

08000a7c <_fflush_r>:
 8000a7c:	b538      	push	{r3, r4, r5, lr}
 8000a7e:	690b      	ldr	r3, [r1, #16]
 8000a80:	4605      	mov	r5, r0
 8000a82:	460c      	mov	r4, r1
 8000a84:	b913      	cbnz	r3, 8000a8c <_fflush_r+0x10>
 8000a86:	2500      	movs	r5, #0
 8000a88:	4628      	mov	r0, r5
 8000a8a:	bd38      	pop	{r3, r4, r5, pc}
 8000a8c:	b118      	cbz	r0, 8000a96 <_fflush_r+0x1a>
 8000a8e:	6983      	ldr	r3, [r0, #24]
 8000a90:	b90b      	cbnz	r3, 8000a96 <_fflush_r+0x1a>
 8000a92:	f000 f887 	bl	8000ba4 <__sinit>
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <_fflush_r+0x6c>)
 8000a98:	429c      	cmp	r4, r3
 8000a9a:	d11b      	bne.n	8000ad4 <_fflush_r+0x58>
 8000a9c:	686c      	ldr	r4, [r5, #4]
 8000a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d0ef      	beq.n	8000a86 <_fflush_r+0xa>
 8000aa6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000aa8:	07d0      	lsls	r0, r2, #31
 8000aaa:	d404      	bmi.n	8000ab6 <_fflush_r+0x3a>
 8000aac:	0599      	lsls	r1, r3, #22
 8000aae:	d402      	bmi.n	8000ab6 <_fflush_r+0x3a>
 8000ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ab2:	f000 f915 	bl	8000ce0 <__retarget_lock_acquire_recursive>
 8000ab6:	4628      	mov	r0, r5
 8000ab8:	4621      	mov	r1, r4
 8000aba:	f7ff ff59 	bl	8000970 <__sflush_r>
 8000abe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000ac0:	07da      	lsls	r2, r3, #31
 8000ac2:	4605      	mov	r5, r0
 8000ac4:	d4e0      	bmi.n	8000a88 <_fflush_r+0xc>
 8000ac6:	89a3      	ldrh	r3, [r4, #12]
 8000ac8:	059b      	lsls	r3, r3, #22
 8000aca:	d4dd      	bmi.n	8000a88 <_fflush_r+0xc>
 8000acc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ace:	f000 f908 	bl	8000ce2 <__retarget_lock_release_recursive>
 8000ad2:	e7d9      	b.n	8000a88 <_fflush_r+0xc>
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <_fflush_r+0x70>)
 8000ad6:	429c      	cmp	r4, r3
 8000ad8:	d101      	bne.n	8000ade <_fflush_r+0x62>
 8000ada:	68ac      	ldr	r4, [r5, #8]
 8000adc:	e7df      	b.n	8000a9e <_fflush_r+0x22>
 8000ade:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <_fflush_r+0x74>)
 8000ae0:	429c      	cmp	r4, r3
 8000ae2:	bf08      	it	eq
 8000ae4:	68ec      	ldreq	r4, [r5, #12]
 8000ae6:	e7da      	b.n	8000a9e <_fflush_r+0x22>
 8000ae8:	080011fc 	.word	0x080011fc
 8000aec:	0800121c 	.word	0x0800121c
 8000af0:	080011dc 	.word	0x080011dc

08000af4 <std>:
 8000af4:	2300      	movs	r3, #0
 8000af6:	b510      	push	{r4, lr}
 8000af8:	4604      	mov	r4, r0
 8000afa:	e9c0 3300 	strd	r3, r3, [r0]
 8000afe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000b02:	6083      	str	r3, [r0, #8]
 8000b04:	8181      	strh	r1, [r0, #12]
 8000b06:	6643      	str	r3, [r0, #100]	; 0x64
 8000b08:	81c2      	strh	r2, [r0, #14]
 8000b0a:	6183      	str	r3, [r0, #24]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	2208      	movs	r2, #8
 8000b10:	305c      	adds	r0, #92	; 0x5c
 8000b12:	f7ff fdef 	bl	80006f4 <memset>
 8000b16:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <std+0x38>)
 8000b18:	6263      	str	r3, [r4, #36]	; 0x24
 8000b1a:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <std+0x3c>)
 8000b1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b1e:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <std+0x40>)
 8000b20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b22:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <std+0x44>)
 8000b24:	6224      	str	r4, [r4, #32]
 8000b26:	6323      	str	r3, [r4, #48]	; 0x30
 8000b28:	bd10      	pop	{r4, pc}
 8000b2a:	bf00      	nop
 8000b2c:	08000f91 	.word	0x08000f91
 8000b30:	08000fb3 	.word	0x08000fb3
 8000b34:	08000feb 	.word	0x08000feb
 8000b38:	0800100f 	.word	0x0800100f

08000b3c <_cleanup_r>:
 8000b3c:	4901      	ldr	r1, [pc, #4]	; (8000b44 <_cleanup_r+0x8>)
 8000b3e:	f000 b8af 	b.w	8000ca0 <_fwalk_reent>
 8000b42:	bf00      	nop
 8000b44:	08000a7d 	.word	0x08000a7d

08000b48 <__sfmoreglue>:
 8000b48:	b570      	push	{r4, r5, r6, lr}
 8000b4a:	2268      	movs	r2, #104	; 0x68
 8000b4c:	1e4d      	subs	r5, r1, #1
 8000b4e:	4355      	muls	r5, r2
 8000b50:	460e      	mov	r6, r1
 8000b52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000b56:	f000 f997 	bl	8000e88 <_malloc_r>
 8000b5a:	4604      	mov	r4, r0
 8000b5c:	b140      	cbz	r0, 8000b70 <__sfmoreglue+0x28>
 8000b5e:	2100      	movs	r1, #0
 8000b60:	e9c0 1600 	strd	r1, r6, [r0]
 8000b64:	300c      	adds	r0, #12
 8000b66:	60a0      	str	r0, [r4, #8]
 8000b68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000b6c:	f7ff fdc2 	bl	80006f4 <memset>
 8000b70:	4620      	mov	r0, r4
 8000b72:	bd70      	pop	{r4, r5, r6, pc}

08000b74 <__sfp_lock_acquire>:
 8000b74:	4801      	ldr	r0, [pc, #4]	; (8000b7c <__sfp_lock_acquire+0x8>)
 8000b76:	f000 b8b3 	b.w	8000ce0 <__retarget_lock_acquire_recursive>
 8000b7a:	bf00      	nop
 8000b7c:	20000085 	.word	0x20000085

08000b80 <__sfp_lock_release>:
 8000b80:	4801      	ldr	r0, [pc, #4]	; (8000b88 <__sfp_lock_release+0x8>)
 8000b82:	f000 b8ae 	b.w	8000ce2 <__retarget_lock_release_recursive>
 8000b86:	bf00      	nop
 8000b88:	20000085 	.word	0x20000085

08000b8c <__sinit_lock_acquire>:
 8000b8c:	4801      	ldr	r0, [pc, #4]	; (8000b94 <__sinit_lock_acquire+0x8>)
 8000b8e:	f000 b8a7 	b.w	8000ce0 <__retarget_lock_acquire_recursive>
 8000b92:	bf00      	nop
 8000b94:	20000086 	.word	0x20000086

08000b98 <__sinit_lock_release>:
 8000b98:	4801      	ldr	r0, [pc, #4]	; (8000ba0 <__sinit_lock_release+0x8>)
 8000b9a:	f000 b8a2 	b.w	8000ce2 <__retarget_lock_release_recursive>
 8000b9e:	bf00      	nop
 8000ba0:	20000086 	.word	0x20000086

08000ba4 <__sinit>:
 8000ba4:	b510      	push	{r4, lr}
 8000ba6:	4604      	mov	r4, r0
 8000ba8:	f7ff fff0 	bl	8000b8c <__sinit_lock_acquire>
 8000bac:	69a3      	ldr	r3, [r4, #24]
 8000bae:	b11b      	cbz	r3, 8000bb8 <__sinit+0x14>
 8000bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bb4:	f7ff bff0 	b.w	8000b98 <__sinit_lock_release>
 8000bb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000bbc:	6523      	str	r3, [r4, #80]	; 0x50
 8000bbe:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <__sinit+0x68>)
 8000bc0:	4a13      	ldr	r2, [pc, #76]	; (8000c10 <__sinit+0x6c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	62a2      	str	r2, [r4, #40]	; 0x28
 8000bc6:	42a3      	cmp	r3, r4
 8000bc8:	bf04      	itt	eq
 8000bca:	2301      	moveq	r3, #1
 8000bcc:	61a3      	streq	r3, [r4, #24]
 8000bce:	4620      	mov	r0, r4
 8000bd0:	f000 f820 	bl	8000c14 <__sfp>
 8000bd4:	6060      	str	r0, [r4, #4]
 8000bd6:	4620      	mov	r0, r4
 8000bd8:	f000 f81c 	bl	8000c14 <__sfp>
 8000bdc:	60a0      	str	r0, [r4, #8]
 8000bde:	4620      	mov	r0, r4
 8000be0:	f000 f818 	bl	8000c14 <__sfp>
 8000be4:	2200      	movs	r2, #0
 8000be6:	60e0      	str	r0, [r4, #12]
 8000be8:	2104      	movs	r1, #4
 8000bea:	6860      	ldr	r0, [r4, #4]
 8000bec:	f7ff ff82 	bl	8000af4 <std>
 8000bf0:	68a0      	ldr	r0, [r4, #8]
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	2109      	movs	r1, #9
 8000bf6:	f7ff ff7d 	bl	8000af4 <std>
 8000bfa:	68e0      	ldr	r0, [r4, #12]
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	2112      	movs	r1, #18
 8000c00:	f7ff ff78 	bl	8000af4 <std>
 8000c04:	2301      	movs	r3, #1
 8000c06:	61a3      	str	r3, [r4, #24]
 8000c08:	e7d2      	b.n	8000bb0 <__sinit+0xc>
 8000c0a:	bf00      	nop
 8000c0c:	080011d8 	.word	0x080011d8
 8000c10:	08000b3d 	.word	0x08000b3d

08000c14 <__sfp>:
 8000c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c16:	4607      	mov	r7, r0
 8000c18:	f7ff ffac 	bl	8000b74 <__sfp_lock_acquire>
 8000c1c:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <__sfp+0x84>)
 8000c1e:	681e      	ldr	r6, [r3, #0]
 8000c20:	69b3      	ldr	r3, [r6, #24]
 8000c22:	b913      	cbnz	r3, 8000c2a <__sfp+0x16>
 8000c24:	4630      	mov	r0, r6
 8000c26:	f7ff ffbd 	bl	8000ba4 <__sinit>
 8000c2a:	3648      	adds	r6, #72	; 0x48
 8000c2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000c30:	3b01      	subs	r3, #1
 8000c32:	d503      	bpl.n	8000c3c <__sfp+0x28>
 8000c34:	6833      	ldr	r3, [r6, #0]
 8000c36:	b30b      	cbz	r3, 8000c7c <__sfp+0x68>
 8000c38:	6836      	ldr	r6, [r6, #0]
 8000c3a:	e7f7      	b.n	8000c2c <__sfp+0x18>
 8000c3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000c40:	b9d5      	cbnz	r5, 8000c78 <__sfp+0x64>
 8000c42:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <__sfp+0x88>)
 8000c44:	60e3      	str	r3, [r4, #12]
 8000c46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000c4a:	6665      	str	r5, [r4, #100]	; 0x64
 8000c4c:	f000 f847 	bl	8000cde <__retarget_lock_init_recursive>
 8000c50:	f7ff ff96 	bl	8000b80 <__sfp_lock_release>
 8000c54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000c58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000c5c:	6025      	str	r5, [r4, #0]
 8000c5e:	61a5      	str	r5, [r4, #24]
 8000c60:	2208      	movs	r2, #8
 8000c62:	4629      	mov	r1, r5
 8000c64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000c68:	f7ff fd44 	bl	80006f4 <memset>
 8000c6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000c70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000c74:	4620      	mov	r0, r4
 8000c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c78:	3468      	adds	r4, #104	; 0x68
 8000c7a:	e7d9      	b.n	8000c30 <__sfp+0x1c>
 8000c7c:	2104      	movs	r1, #4
 8000c7e:	4638      	mov	r0, r7
 8000c80:	f7ff ff62 	bl	8000b48 <__sfmoreglue>
 8000c84:	4604      	mov	r4, r0
 8000c86:	6030      	str	r0, [r6, #0]
 8000c88:	2800      	cmp	r0, #0
 8000c8a:	d1d5      	bne.n	8000c38 <__sfp+0x24>
 8000c8c:	f7ff ff78 	bl	8000b80 <__sfp_lock_release>
 8000c90:	230c      	movs	r3, #12
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	e7ee      	b.n	8000c74 <__sfp+0x60>
 8000c96:	bf00      	nop
 8000c98:	080011d8 	.word	0x080011d8
 8000c9c:	ffff0001 	.word	0xffff0001

08000ca0 <_fwalk_reent>:
 8000ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ca4:	4606      	mov	r6, r0
 8000ca6:	4688      	mov	r8, r1
 8000ca8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000cac:	2700      	movs	r7, #0
 8000cae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000cb2:	f1b9 0901 	subs.w	r9, r9, #1
 8000cb6:	d505      	bpl.n	8000cc4 <_fwalk_reent+0x24>
 8000cb8:	6824      	ldr	r4, [r4, #0]
 8000cba:	2c00      	cmp	r4, #0
 8000cbc:	d1f7      	bne.n	8000cae <_fwalk_reent+0xe>
 8000cbe:	4638      	mov	r0, r7
 8000cc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000cc4:	89ab      	ldrh	r3, [r5, #12]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d907      	bls.n	8000cda <_fwalk_reent+0x3a>
 8000cca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	d003      	beq.n	8000cda <_fwalk_reent+0x3a>
 8000cd2:	4629      	mov	r1, r5
 8000cd4:	4630      	mov	r0, r6
 8000cd6:	47c0      	blx	r8
 8000cd8:	4307      	orrs	r7, r0
 8000cda:	3568      	adds	r5, #104	; 0x68
 8000cdc:	e7e9      	b.n	8000cb2 <_fwalk_reent+0x12>

08000cde <__retarget_lock_init_recursive>:
 8000cde:	4770      	bx	lr

08000ce0 <__retarget_lock_acquire_recursive>:
 8000ce0:	4770      	bx	lr

08000ce2 <__retarget_lock_release_recursive>:
 8000ce2:	4770      	bx	lr

08000ce4 <__swhatbuf_r>:
 8000ce4:	b570      	push	{r4, r5, r6, lr}
 8000ce6:	460e      	mov	r6, r1
 8000ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cec:	2900      	cmp	r1, #0
 8000cee:	b096      	sub	sp, #88	; 0x58
 8000cf0:	4614      	mov	r4, r2
 8000cf2:	461d      	mov	r5, r3
 8000cf4:	da08      	bge.n	8000d08 <__swhatbuf_r+0x24>
 8000cf6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	602a      	str	r2, [r5, #0]
 8000cfe:	061a      	lsls	r2, r3, #24
 8000d00:	d410      	bmi.n	8000d24 <__swhatbuf_r+0x40>
 8000d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d06:	e00e      	b.n	8000d26 <__swhatbuf_r+0x42>
 8000d08:	466a      	mov	r2, sp
 8000d0a:	f000 f9a7 	bl	800105c <_fstat_r>
 8000d0e:	2800      	cmp	r0, #0
 8000d10:	dbf1      	blt.n	8000cf6 <__swhatbuf_r+0x12>
 8000d12:	9a01      	ldr	r2, [sp, #4]
 8000d14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000d18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000d1c:	425a      	negs	r2, r3
 8000d1e:	415a      	adcs	r2, r3
 8000d20:	602a      	str	r2, [r5, #0]
 8000d22:	e7ee      	b.n	8000d02 <__swhatbuf_r+0x1e>
 8000d24:	2340      	movs	r3, #64	; 0x40
 8000d26:	2000      	movs	r0, #0
 8000d28:	6023      	str	r3, [r4, #0]
 8000d2a:	b016      	add	sp, #88	; 0x58
 8000d2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000d30 <__smakebuf_r>:
 8000d30:	898b      	ldrh	r3, [r1, #12]
 8000d32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000d34:	079d      	lsls	r5, r3, #30
 8000d36:	4606      	mov	r6, r0
 8000d38:	460c      	mov	r4, r1
 8000d3a:	d507      	bpl.n	8000d4c <__smakebuf_r+0x1c>
 8000d3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000d40:	6023      	str	r3, [r4, #0]
 8000d42:	6123      	str	r3, [r4, #16]
 8000d44:	2301      	movs	r3, #1
 8000d46:	6163      	str	r3, [r4, #20]
 8000d48:	b002      	add	sp, #8
 8000d4a:	bd70      	pop	{r4, r5, r6, pc}
 8000d4c:	ab01      	add	r3, sp, #4
 8000d4e:	466a      	mov	r2, sp
 8000d50:	f7ff ffc8 	bl	8000ce4 <__swhatbuf_r>
 8000d54:	9900      	ldr	r1, [sp, #0]
 8000d56:	4605      	mov	r5, r0
 8000d58:	4630      	mov	r0, r6
 8000d5a:	f000 f895 	bl	8000e88 <_malloc_r>
 8000d5e:	b948      	cbnz	r0, 8000d74 <__smakebuf_r+0x44>
 8000d60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d64:	059a      	lsls	r2, r3, #22
 8000d66:	d4ef      	bmi.n	8000d48 <__smakebuf_r+0x18>
 8000d68:	f023 0303 	bic.w	r3, r3, #3
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	81a3      	strh	r3, [r4, #12]
 8000d72:	e7e3      	b.n	8000d3c <__smakebuf_r+0xc>
 8000d74:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <__smakebuf_r+0x7c>)
 8000d76:	62b3      	str	r3, [r6, #40]	; 0x28
 8000d78:	89a3      	ldrh	r3, [r4, #12]
 8000d7a:	6020      	str	r0, [r4, #0]
 8000d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d80:	81a3      	strh	r3, [r4, #12]
 8000d82:	9b00      	ldr	r3, [sp, #0]
 8000d84:	6163      	str	r3, [r4, #20]
 8000d86:	9b01      	ldr	r3, [sp, #4]
 8000d88:	6120      	str	r0, [r4, #16]
 8000d8a:	b15b      	cbz	r3, 8000da4 <__smakebuf_r+0x74>
 8000d8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d90:	4630      	mov	r0, r6
 8000d92:	f000 f975 	bl	8001080 <_isatty_r>
 8000d96:	b128      	cbz	r0, 8000da4 <__smakebuf_r+0x74>
 8000d98:	89a3      	ldrh	r3, [r4, #12]
 8000d9a:	f023 0303 	bic.w	r3, r3, #3
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	81a3      	strh	r3, [r4, #12]
 8000da4:	89a0      	ldrh	r0, [r4, #12]
 8000da6:	4305      	orrs	r5, r0
 8000da8:	81a5      	strh	r5, [r4, #12]
 8000daa:	e7cd      	b.n	8000d48 <__smakebuf_r+0x18>
 8000dac:	08000b3d 	.word	0x08000b3d

08000db0 <_free_r>:
 8000db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000db2:	2900      	cmp	r1, #0
 8000db4:	d044      	beq.n	8000e40 <_free_r+0x90>
 8000db6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000dba:	9001      	str	r0, [sp, #4]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	f1a1 0404 	sub.w	r4, r1, #4
 8000dc2:	bfb8      	it	lt
 8000dc4:	18e4      	addlt	r4, r4, r3
 8000dc6:	f000 f97d 	bl	80010c4 <__malloc_lock>
 8000dca:	4a1e      	ldr	r2, [pc, #120]	; (8000e44 <_free_r+0x94>)
 8000dcc:	9801      	ldr	r0, [sp, #4]
 8000dce:	6813      	ldr	r3, [r2, #0]
 8000dd0:	b933      	cbnz	r3, 8000de0 <_free_r+0x30>
 8000dd2:	6063      	str	r3, [r4, #4]
 8000dd4:	6014      	str	r4, [r2, #0]
 8000dd6:	b003      	add	sp, #12
 8000dd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000ddc:	f000 b978 	b.w	80010d0 <__malloc_unlock>
 8000de0:	42a3      	cmp	r3, r4
 8000de2:	d908      	bls.n	8000df6 <_free_r+0x46>
 8000de4:	6825      	ldr	r5, [r4, #0]
 8000de6:	1961      	adds	r1, r4, r5
 8000de8:	428b      	cmp	r3, r1
 8000dea:	bf01      	itttt	eq
 8000dec:	6819      	ldreq	r1, [r3, #0]
 8000dee:	685b      	ldreq	r3, [r3, #4]
 8000df0:	1949      	addeq	r1, r1, r5
 8000df2:	6021      	streq	r1, [r4, #0]
 8000df4:	e7ed      	b.n	8000dd2 <_free_r+0x22>
 8000df6:	461a      	mov	r2, r3
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	b10b      	cbz	r3, 8000e00 <_free_r+0x50>
 8000dfc:	42a3      	cmp	r3, r4
 8000dfe:	d9fa      	bls.n	8000df6 <_free_r+0x46>
 8000e00:	6811      	ldr	r1, [r2, #0]
 8000e02:	1855      	adds	r5, r2, r1
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	d10b      	bne.n	8000e20 <_free_r+0x70>
 8000e08:	6824      	ldr	r4, [r4, #0]
 8000e0a:	4421      	add	r1, r4
 8000e0c:	1854      	adds	r4, r2, r1
 8000e0e:	42a3      	cmp	r3, r4
 8000e10:	6011      	str	r1, [r2, #0]
 8000e12:	d1e0      	bne.n	8000dd6 <_free_r+0x26>
 8000e14:	681c      	ldr	r4, [r3, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	6053      	str	r3, [r2, #4]
 8000e1a:	4421      	add	r1, r4
 8000e1c:	6011      	str	r1, [r2, #0]
 8000e1e:	e7da      	b.n	8000dd6 <_free_r+0x26>
 8000e20:	d902      	bls.n	8000e28 <_free_r+0x78>
 8000e22:	230c      	movs	r3, #12
 8000e24:	6003      	str	r3, [r0, #0]
 8000e26:	e7d6      	b.n	8000dd6 <_free_r+0x26>
 8000e28:	6825      	ldr	r5, [r4, #0]
 8000e2a:	1961      	adds	r1, r4, r5
 8000e2c:	428b      	cmp	r3, r1
 8000e2e:	bf04      	itt	eq
 8000e30:	6819      	ldreq	r1, [r3, #0]
 8000e32:	685b      	ldreq	r3, [r3, #4]
 8000e34:	6063      	str	r3, [r4, #4]
 8000e36:	bf04      	itt	eq
 8000e38:	1949      	addeq	r1, r1, r5
 8000e3a:	6021      	streq	r1, [r4, #0]
 8000e3c:	6054      	str	r4, [r2, #4]
 8000e3e:	e7ca      	b.n	8000dd6 <_free_r+0x26>
 8000e40:	b003      	add	sp, #12
 8000e42:	bd30      	pop	{r4, r5, pc}
 8000e44:	20000088 	.word	0x20000088

08000e48 <sbrk_aligned>:
 8000e48:	b570      	push	{r4, r5, r6, lr}
 8000e4a:	4e0e      	ldr	r6, [pc, #56]	; (8000e84 <sbrk_aligned+0x3c>)
 8000e4c:	460c      	mov	r4, r1
 8000e4e:	6831      	ldr	r1, [r6, #0]
 8000e50:	4605      	mov	r5, r0
 8000e52:	b911      	cbnz	r1, 8000e5a <sbrk_aligned+0x12>
 8000e54:	f000 f88c 	bl	8000f70 <_sbrk_r>
 8000e58:	6030      	str	r0, [r6, #0]
 8000e5a:	4621      	mov	r1, r4
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	f000 f887 	bl	8000f70 <_sbrk_r>
 8000e62:	1c43      	adds	r3, r0, #1
 8000e64:	d00a      	beq.n	8000e7c <sbrk_aligned+0x34>
 8000e66:	1cc4      	adds	r4, r0, #3
 8000e68:	f024 0403 	bic.w	r4, r4, #3
 8000e6c:	42a0      	cmp	r0, r4
 8000e6e:	d007      	beq.n	8000e80 <sbrk_aligned+0x38>
 8000e70:	1a21      	subs	r1, r4, r0
 8000e72:	4628      	mov	r0, r5
 8000e74:	f000 f87c 	bl	8000f70 <_sbrk_r>
 8000e78:	3001      	adds	r0, #1
 8000e7a:	d101      	bne.n	8000e80 <sbrk_aligned+0x38>
 8000e7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000e80:	4620      	mov	r0, r4
 8000e82:	bd70      	pop	{r4, r5, r6, pc}
 8000e84:	2000008c 	.word	0x2000008c

08000e88 <_malloc_r>:
 8000e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e8c:	1ccd      	adds	r5, r1, #3
 8000e8e:	f025 0503 	bic.w	r5, r5, #3
 8000e92:	3508      	adds	r5, #8
 8000e94:	2d0c      	cmp	r5, #12
 8000e96:	bf38      	it	cc
 8000e98:	250c      	movcc	r5, #12
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	4607      	mov	r7, r0
 8000e9e:	db01      	blt.n	8000ea4 <_malloc_r+0x1c>
 8000ea0:	42a9      	cmp	r1, r5
 8000ea2:	d905      	bls.n	8000eb0 <_malloc_r+0x28>
 8000ea4:	230c      	movs	r3, #12
 8000ea6:	603b      	str	r3, [r7, #0]
 8000ea8:	2600      	movs	r6, #0
 8000eaa:	4630      	mov	r0, r6
 8000eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000eb0:	4e2e      	ldr	r6, [pc, #184]	; (8000f6c <_malloc_r+0xe4>)
 8000eb2:	f000 f907 	bl	80010c4 <__malloc_lock>
 8000eb6:	6833      	ldr	r3, [r6, #0]
 8000eb8:	461c      	mov	r4, r3
 8000eba:	bb34      	cbnz	r4, 8000f0a <_malloc_r+0x82>
 8000ebc:	4629      	mov	r1, r5
 8000ebe:	4638      	mov	r0, r7
 8000ec0:	f7ff ffc2 	bl	8000e48 <sbrk_aligned>
 8000ec4:	1c43      	adds	r3, r0, #1
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	d14d      	bne.n	8000f66 <_malloc_r+0xde>
 8000eca:	6834      	ldr	r4, [r6, #0]
 8000ecc:	4626      	mov	r6, r4
 8000ece:	2e00      	cmp	r6, #0
 8000ed0:	d140      	bne.n	8000f54 <_malloc_r+0xcc>
 8000ed2:	6823      	ldr	r3, [r4, #0]
 8000ed4:	4631      	mov	r1, r6
 8000ed6:	4638      	mov	r0, r7
 8000ed8:	eb04 0803 	add.w	r8, r4, r3
 8000edc:	f000 f848 	bl	8000f70 <_sbrk_r>
 8000ee0:	4580      	cmp	r8, r0
 8000ee2:	d13a      	bne.n	8000f5a <_malloc_r+0xd2>
 8000ee4:	6821      	ldr	r1, [r4, #0]
 8000ee6:	3503      	adds	r5, #3
 8000ee8:	1a6d      	subs	r5, r5, r1
 8000eea:	f025 0503 	bic.w	r5, r5, #3
 8000eee:	3508      	adds	r5, #8
 8000ef0:	2d0c      	cmp	r5, #12
 8000ef2:	bf38      	it	cc
 8000ef4:	250c      	movcc	r5, #12
 8000ef6:	4629      	mov	r1, r5
 8000ef8:	4638      	mov	r0, r7
 8000efa:	f7ff ffa5 	bl	8000e48 <sbrk_aligned>
 8000efe:	3001      	adds	r0, #1
 8000f00:	d02b      	beq.n	8000f5a <_malloc_r+0xd2>
 8000f02:	6823      	ldr	r3, [r4, #0]
 8000f04:	442b      	add	r3, r5
 8000f06:	6023      	str	r3, [r4, #0]
 8000f08:	e00e      	b.n	8000f28 <_malloc_r+0xa0>
 8000f0a:	6822      	ldr	r2, [r4, #0]
 8000f0c:	1b52      	subs	r2, r2, r5
 8000f0e:	d41e      	bmi.n	8000f4e <_malloc_r+0xc6>
 8000f10:	2a0b      	cmp	r2, #11
 8000f12:	d916      	bls.n	8000f42 <_malloc_r+0xba>
 8000f14:	1961      	adds	r1, r4, r5
 8000f16:	42a3      	cmp	r3, r4
 8000f18:	6025      	str	r5, [r4, #0]
 8000f1a:	bf18      	it	ne
 8000f1c:	6059      	strne	r1, [r3, #4]
 8000f1e:	6863      	ldr	r3, [r4, #4]
 8000f20:	bf08      	it	eq
 8000f22:	6031      	streq	r1, [r6, #0]
 8000f24:	5162      	str	r2, [r4, r5]
 8000f26:	604b      	str	r3, [r1, #4]
 8000f28:	4638      	mov	r0, r7
 8000f2a:	f104 060b 	add.w	r6, r4, #11
 8000f2e:	f000 f8cf 	bl	80010d0 <__malloc_unlock>
 8000f32:	f026 0607 	bic.w	r6, r6, #7
 8000f36:	1d23      	adds	r3, r4, #4
 8000f38:	1af2      	subs	r2, r6, r3
 8000f3a:	d0b6      	beq.n	8000eaa <_malloc_r+0x22>
 8000f3c:	1b9b      	subs	r3, r3, r6
 8000f3e:	50a3      	str	r3, [r4, r2]
 8000f40:	e7b3      	b.n	8000eaa <_malloc_r+0x22>
 8000f42:	6862      	ldr	r2, [r4, #4]
 8000f44:	42a3      	cmp	r3, r4
 8000f46:	bf0c      	ite	eq
 8000f48:	6032      	streq	r2, [r6, #0]
 8000f4a:	605a      	strne	r2, [r3, #4]
 8000f4c:	e7ec      	b.n	8000f28 <_malloc_r+0xa0>
 8000f4e:	4623      	mov	r3, r4
 8000f50:	6864      	ldr	r4, [r4, #4]
 8000f52:	e7b2      	b.n	8000eba <_malloc_r+0x32>
 8000f54:	4634      	mov	r4, r6
 8000f56:	6876      	ldr	r6, [r6, #4]
 8000f58:	e7b9      	b.n	8000ece <_malloc_r+0x46>
 8000f5a:	230c      	movs	r3, #12
 8000f5c:	603b      	str	r3, [r7, #0]
 8000f5e:	4638      	mov	r0, r7
 8000f60:	f000 f8b6 	bl	80010d0 <__malloc_unlock>
 8000f64:	e7a1      	b.n	8000eaa <_malloc_r+0x22>
 8000f66:	6025      	str	r5, [r4, #0]
 8000f68:	e7de      	b.n	8000f28 <_malloc_r+0xa0>
 8000f6a:	bf00      	nop
 8000f6c:	20000088 	.word	0x20000088

08000f70 <_sbrk_r>:
 8000f70:	b538      	push	{r3, r4, r5, lr}
 8000f72:	4d06      	ldr	r5, [pc, #24]	; (8000f8c <_sbrk_r+0x1c>)
 8000f74:	2300      	movs	r3, #0
 8000f76:	4604      	mov	r4, r0
 8000f78:	4608      	mov	r0, r1
 8000f7a:	602b      	str	r3, [r5, #0]
 8000f7c:	f7ff fb30 	bl	80005e0 <_sbrk>
 8000f80:	1c43      	adds	r3, r0, #1
 8000f82:	d102      	bne.n	8000f8a <_sbrk_r+0x1a>
 8000f84:	682b      	ldr	r3, [r5, #0]
 8000f86:	b103      	cbz	r3, 8000f8a <_sbrk_r+0x1a>
 8000f88:	6023      	str	r3, [r4, #0]
 8000f8a:	bd38      	pop	{r3, r4, r5, pc}
 8000f8c:	20000090 	.word	0x20000090

08000f90 <__sread>:
 8000f90:	b510      	push	{r4, lr}
 8000f92:	460c      	mov	r4, r1
 8000f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f98:	f000 f8a0 	bl	80010dc <_read_r>
 8000f9c:	2800      	cmp	r0, #0
 8000f9e:	bfab      	itete	ge
 8000fa0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000fa2:	89a3      	ldrhlt	r3, [r4, #12]
 8000fa4:	181b      	addge	r3, r3, r0
 8000fa6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000faa:	bfac      	ite	ge
 8000fac:	6563      	strge	r3, [r4, #84]	; 0x54
 8000fae:	81a3      	strhlt	r3, [r4, #12]
 8000fb0:	bd10      	pop	{r4, pc}

08000fb2 <__swrite>:
 8000fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fb6:	461f      	mov	r7, r3
 8000fb8:	898b      	ldrh	r3, [r1, #12]
 8000fba:	05db      	lsls	r3, r3, #23
 8000fbc:	4605      	mov	r5, r0
 8000fbe:	460c      	mov	r4, r1
 8000fc0:	4616      	mov	r6, r2
 8000fc2:	d505      	bpl.n	8000fd0 <__swrite+0x1e>
 8000fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fc8:	2302      	movs	r3, #2
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f000 f868 	bl	80010a0 <_lseek_r>
 8000fd0:	89a3      	ldrh	r3, [r4, #12]
 8000fd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000fd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fda:	81a3      	strh	r3, [r4, #12]
 8000fdc:	4632      	mov	r2, r6
 8000fde:	463b      	mov	r3, r7
 8000fe0:	4628      	mov	r0, r5
 8000fe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fe6:	f000 b817 	b.w	8001018 <_write_r>

08000fea <__sseek>:
 8000fea:	b510      	push	{r4, lr}
 8000fec:	460c      	mov	r4, r1
 8000fee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ff2:	f000 f855 	bl	80010a0 <_lseek_r>
 8000ff6:	1c43      	adds	r3, r0, #1
 8000ff8:	89a3      	ldrh	r3, [r4, #12]
 8000ffa:	bf15      	itete	ne
 8000ffc:	6560      	strne	r0, [r4, #84]	; 0x54
 8000ffe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001002:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001006:	81a3      	strheq	r3, [r4, #12]
 8001008:	bf18      	it	ne
 800100a:	81a3      	strhne	r3, [r4, #12]
 800100c:	bd10      	pop	{r4, pc}

0800100e <__sclose>:
 800100e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001012:	f000 b813 	b.w	800103c <_close_r>
	...

08001018 <_write_r>:
 8001018:	b538      	push	{r3, r4, r5, lr}
 800101a:	4d07      	ldr	r5, [pc, #28]	; (8001038 <_write_r+0x20>)
 800101c:	4604      	mov	r4, r0
 800101e:	4608      	mov	r0, r1
 8001020:	4611      	mov	r1, r2
 8001022:	2200      	movs	r2, #0
 8001024:	602a      	str	r2, [r5, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	f7ff fa89 	bl	800053e <_write>
 800102c:	1c43      	adds	r3, r0, #1
 800102e:	d102      	bne.n	8001036 <_write_r+0x1e>
 8001030:	682b      	ldr	r3, [r5, #0]
 8001032:	b103      	cbz	r3, 8001036 <_write_r+0x1e>
 8001034:	6023      	str	r3, [r4, #0]
 8001036:	bd38      	pop	{r3, r4, r5, pc}
 8001038:	20000090 	.word	0x20000090

0800103c <_close_r>:
 800103c:	b538      	push	{r3, r4, r5, lr}
 800103e:	4d06      	ldr	r5, [pc, #24]	; (8001058 <_close_r+0x1c>)
 8001040:	2300      	movs	r3, #0
 8001042:	4604      	mov	r4, r0
 8001044:	4608      	mov	r0, r1
 8001046:	602b      	str	r3, [r5, #0]
 8001048:	f7ff fa95 	bl	8000576 <_close>
 800104c:	1c43      	adds	r3, r0, #1
 800104e:	d102      	bne.n	8001056 <_close_r+0x1a>
 8001050:	682b      	ldr	r3, [r5, #0]
 8001052:	b103      	cbz	r3, 8001056 <_close_r+0x1a>
 8001054:	6023      	str	r3, [r4, #0]
 8001056:	bd38      	pop	{r3, r4, r5, pc}
 8001058:	20000090 	.word	0x20000090

0800105c <_fstat_r>:
 800105c:	b538      	push	{r3, r4, r5, lr}
 800105e:	4d07      	ldr	r5, [pc, #28]	; (800107c <_fstat_r+0x20>)
 8001060:	2300      	movs	r3, #0
 8001062:	4604      	mov	r4, r0
 8001064:	4608      	mov	r0, r1
 8001066:	4611      	mov	r1, r2
 8001068:	602b      	str	r3, [r5, #0]
 800106a:	f7ff fa90 	bl	800058e <_fstat>
 800106e:	1c43      	adds	r3, r0, #1
 8001070:	d102      	bne.n	8001078 <_fstat_r+0x1c>
 8001072:	682b      	ldr	r3, [r5, #0]
 8001074:	b103      	cbz	r3, 8001078 <_fstat_r+0x1c>
 8001076:	6023      	str	r3, [r4, #0]
 8001078:	bd38      	pop	{r3, r4, r5, pc}
 800107a:	bf00      	nop
 800107c:	20000090 	.word	0x20000090

08001080 <_isatty_r>:
 8001080:	b538      	push	{r3, r4, r5, lr}
 8001082:	4d06      	ldr	r5, [pc, #24]	; (800109c <_isatty_r+0x1c>)
 8001084:	2300      	movs	r3, #0
 8001086:	4604      	mov	r4, r0
 8001088:	4608      	mov	r0, r1
 800108a:	602b      	str	r3, [r5, #0]
 800108c:	f7ff fa8f 	bl	80005ae <_isatty>
 8001090:	1c43      	adds	r3, r0, #1
 8001092:	d102      	bne.n	800109a <_isatty_r+0x1a>
 8001094:	682b      	ldr	r3, [r5, #0]
 8001096:	b103      	cbz	r3, 800109a <_isatty_r+0x1a>
 8001098:	6023      	str	r3, [r4, #0]
 800109a:	bd38      	pop	{r3, r4, r5, pc}
 800109c:	20000090 	.word	0x20000090

080010a0 <_lseek_r>:
 80010a0:	b538      	push	{r3, r4, r5, lr}
 80010a2:	4d07      	ldr	r5, [pc, #28]	; (80010c0 <_lseek_r+0x20>)
 80010a4:	4604      	mov	r4, r0
 80010a6:	4608      	mov	r0, r1
 80010a8:	4611      	mov	r1, r2
 80010aa:	2200      	movs	r2, #0
 80010ac:	602a      	str	r2, [r5, #0]
 80010ae:	461a      	mov	r2, r3
 80010b0:	f7ff fa88 	bl	80005c4 <_lseek>
 80010b4:	1c43      	adds	r3, r0, #1
 80010b6:	d102      	bne.n	80010be <_lseek_r+0x1e>
 80010b8:	682b      	ldr	r3, [r5, #0]
 80010ba:	b103      	cbz	r3, 80010be <_lseek_r+0x1e>
 80010bc:	6023      	str	r3, [r4, #0]
 80010be:	bd38      	pop	{r3, r4, r5, pc}
 80010c0:	20000090 	.word	0x20000090

080010c4 <__malloc_lock>:
 80010c4:	4801      	ldr	r0, [pc, #4]	; (80010cc <__malloc_lock+0x8>)
 80010c6:	f7ff be0b 	b.w	8000ce0 <__retarget_lock_acquire_recursive>
 80010ca:	bf00      	nop
 80010cc:	20000084 	.word	0x20000084

080010d0 <__malloc_unlock>:
 80010d0:	4801      	ldr	r0, [pc, #4]	; (80010d8 <__malloc_unlock+0x8>)
 80010d2:	f7ff be06 	b.w	8000ce2 <__retarget_lock_release_recursive>
 80010d6:	bf00      	nop
 80010d8:	20000084 	.word	0x20000084

080010dc <_read_r>:
 80010dc:	b538      	push	{r3, r4, r5, lr}
 80010de:	4d07      	ldr	r5, [pc, #28]	; (80010fc <_read_r+0x20>)
 80010e0:	4604      	mov	r4, r0
 80010e2:	4608      	mov	r0, r1
 80010e4:	4611      	mov	r1, r2
 80010e6:	2200      	movs	r2, #0
 80010e8:	602a      	str	r2, [r5, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	f7ff fa0a 	bl	8000504 <_read>
 80010f0:	1c43      	adds	r3, r0, #1
 80010f2:	d102      	bne.n	80010fa <_read_r+0x1e>
 80010f4:	682b      	ldr	r3, [r5, #0]
 80010f6:	b103      	cbz	r3, 80010fa <_read_r+0x1e>
 80010f8:	6023      	str	r3, [r4, #0]
 80010fa:	bd38      	pop	{r3, r4, r5, pc}
 80010fc:	20000090 	.word	0x20000090

08001100 <_init>:
 8001100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001102:	bf00      	nop
 8001104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001106:	bc08      	pop	{r3}
 8001108:	469e      	mov	lr, r3
 800110a:	4770      	bx	lr

0800110c <_fini>:
 800110c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800110e:	bf00      	nop
 8001110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001112:	bc08      	pop	{r3}
 8001114:	469e      	mov	lr, r3
 8001116:	4770      	bx	lr
